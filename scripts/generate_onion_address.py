#!/usr/bin/env python3
"""
Generate a Tor v3 onion address for Monero RPC
This script creates the necessary keys and configuration for a Tor hidden service

Requirements:
    pip install cryptography

Alternative: Use Tor's built-in key generation (see generate_with_tor() function)
"""

import os
import sys
import base64
import hashlib

# Try to import cryptography, provide helpful error if not available
try:
    from cryptography.hazmat.primitives.asymmetric import ed25519
    from cryptography.hazmat.primitives import serialization
    CRYPTOGRAPHY_AVAILABLE = True
except ImportError:
    CRYPTOGRAPHY_AVAILABLE = False
    print("=" * 70)
    print("WARNING: 'cryptography' module not found")
    print("=" * 70)
    print()
    print("To install the required dependency, run:")
    print("  pip install cryptography")
    print()
    print("Or use the alternative method with Tor's built-in key generation:")
    print("  python3 scripts/generate_onion_address.py --use-tor")
    print()
    print("=" * 70)

def generate_v3_onion_address():
    """
    Generate a Tor v3 onion address and private key
    Returns: (onion_address, private_key_base64, public_key_base64)
    """
    # Generate Ed25519 key pair
    private_key = ed25519.Ed25519PrivateKey.generate()
    public_key = private_key.public_key()
    
    # Get raw public key bytes (32 bytes)
    public_key_bytes = public_key.public_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PublicFormat.Raw
    )
    
    # Get raw private key bytes (32 bytes)
    private_key_bytes = private_key.private_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PrivateFormat.Raw,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # Calculate onion address
    # v3 onion address = base32(public_key || checksum || version)
    version = b'\x03'  # Version 3
    checksum_input = b'.onion checksum' + public_key_bytes + version
    checksum = hashlib.sha3_256(checksum_input).digest()[:2]
    
    # Combine and encode
    onion_address_bytes = public_key_bytes + checksum + version
    onion_address = base64.b32encode(onion_address_bytes).decode('ascii').lower()
    
    # Encode keys for storage
    private_key_b64 = base64.b64encode(private_key_bytes).decode('ascii')
    public_key_b64 = base64.b64encode(public_key_bytes).decode('ascii')
    
    return onion_address, private_key_b64, public_key_b64

def create_tor_hidden_service_files(output_dir='tor_hidden_service'):
    """
    Create Tor hidden service directory with necessary files
    """
    os.makedirs(output_dir, exist_ok=True)
    
    onion_address, private_key_b64, public_key_b64 = generate_v3_onion_address()
    
    # Create hostname file
    hostname_path = os.path.join(output_dir, 'hostname')
    with open(hostname_path, 'w') as f:
        f.write(f"{onion_address}.onion\n")
    
    # Create hs_ed25519_secret_key file (Tor format)
    # Format: "== ed25519v1-secret: type0 ==" + base64(private_key)
    secret_key_path = os.path.join(output_dir, 'hs_ed25519_secret_key')
    with open(secret_key_path, 'w') as f:
        f.write(f"== ed25519v1-secret: type0 ==\n")
        f.write(f"{private_key_b64}\n")
    
    # Create hs_ed25519_public_key file (Tor format)
    public_key_path = os.path.join(output_dir, 'hs_ed25519_public_key')
    with open(public_key_path, 'w') as f:
        f.write(f"== ed25519v1-public: type0 ==\n")
        f.write(f"{public_key_b64}\n")
    
    # Set proper permissions (owner read/write only)
    os.chmod(output_dir, 0o700)
    os.chmod(secret_key_path, 0o600)
    os.chmod(public_key_path, 0o600)
    os.chmod(hostname_path, 0o600)
    
    return onion_address

def generate_torrc_config(onion_address, rpc_port=18084, p2p_port=18080):
    """
    Generate torrc configuration for Monero hidden service
    """
    config = f"""# Tor configuration for Monero node
# Generated by generate_onion_address.py

# SOCKS proxy for outgoing connections
SOCKSPort 9050

# Hidden service for Monero RPC
HiddenServiceDir /var/lib/tor/monero_rpc/
HiddenServicePort {rpc_port} 127.0.0.1:{rpc_port}

# Hidden service for Monero P2P (optional)
HiddenServiceDir /var/lib/tor/monero_p2p/
HiddenServicePort {p2p_port} 127.0.0.1:{p2p_port}

# Security settings
CookieAuthentication 1
ControlPort 9051
"""
    return config

def generate_monero_config(onion_address, rpc_port=18084):
    """
    Generate Monero daemon configuration for Tor
    """
    config = f"""# Monero daemon configuration for Tor
# Generated by generate_onion_address.py

# RPC settings
rpc-bind-ip=127.0.0.1
rpc-bind-port={rpc_port}
confirm-external-bind=1

# Tor proxy settings
tx-proxy=tor,127.0.0.1:9050,disable_noise
anonymous-inbound={onion_address}.onion:{rpc_port},127.0.0.1:{rpc_port}

# P2P settings
p2p-bind-ip=127.0.0.1
p2p-bind-port=18080

# Additional privacy settings
no-igd=1
hide-my-port=1
"""
    return config

def generate_with_tor():
    """
    Alternative method: Use Tor to generate the onion address
    This doesn't require the cryptography library
    """
    print("Using Tor's built-in key generation...")
    print()
    print("Steps to generate onion address with Tor:")
    print()
    print("1. Create a temporary torrc file:")
    print("   echo 'HiddenServiceDir /tmp/monero_hs' > /tmp/temp_torrc")
    print("   echo 'HiddenServicePort 18084 127.0.0.1:18084' >> /tmp/temp_torrc")
    print()
    print("2. Start Tor with the temporary config:")
    print("   tor -f /tmp/temp_torrc")
    print()
    print("3. Wait a few seconds, then check the generated address:")
    print("   cat /tmp/monero_hs/hostname")
    print()
    print("4. Copy the hidden service directory to the proper location:")
    print("   sudo cp -r /tmp/monero_hs /var/lib/tor/monero_rpc")
    print("   sudo chown -R debian-tor:debian-tor /var/lib/tor/monero_rpc")
    print()
    print("5. Stop the temporary Tor instance (Ctrl+C)")
    print()
    
    # Try to execute if tor is available
    try:
        import subprocess
        import tempfile
        
        with tempfile.TemporaryDirectory() as tmpdir:
            hs_dir = os.path.join(tmpdir, 'monero_hs')
            torrc_path = os.path.join(tmpdir, 'torrc')
            
            # Create temporary torrc
            with open(torrc_path, 'w') as f:
                f.write(f"HiddenServiceDir {hs_dir}\n")
                f.write("HiddenServicePort 18084 127.0.0.1:18084\n")
            
            print("Attempting to generate with Tor...")
            # Start tor briefly to generate keys
            proc = subprocess.Popen(['tor', '-f', torrc_path], 
                                  stdout=subprocess.PIPE, 
                                  stderr=subprocess.PIPE)
            
            # Wait for key generation (usually takes 2-3 seconds)
            import time
            time.sleep(5)
            proc.terminate()
            
            # Read the generated hostname
            hostname_path = os.path.join(hs_dir, 'hostname')
            if os.path.exists(hostname_path):
                with open(hostname_path, 'r') as f:
                    onion_address = f.read().strip()
                
                print(f"\n✓ Onion address generated: {onion_address}")
                print(f"\nHidden service files are in: {hs_dir}")
                print("Copy these files to /var/lib/tor/monero_rpc/")
                
                return onion_address
            else:
                print("\n✗ Failed to generate keys. Make sure Tor is installed.")
                return None
                
    except FileNotFoundError:
        print("\n✗ Tor is not installed or not in PATH")
        print("Install Tor first: sudo apt-get install tor")
        return None
    except Exception as e:
        print(f"\n✗ Error: {e}")
        return None

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate Tor v3 onion address for Monero')
    parser.add_argument('--use-tor', action='store_true', 
                       help='Use Tor built-in key generation instead of Python cryptography')
    args = parser.parse_args()
    
    if args.use_tor or not CRYPTOGRAPHY_AVAILABLE:
        # Use Tor's built-in generation
        onion_address = generate_with_tor()
        if onion_address:
            # Generate config files
            onion_address = onion_address.replace('.onion', '')
            torrc_config = generate_torrc_config(onion_address)
            monero_config = generate_monero_config(onion_address)
            
            with open('torrc.conf', 'w') as f:
                f.write(torrc_config)
            print("\n✓ Tor configuration saved to: torrc.conf")
            
            with open('monerod.conf', 'w') as f:
                f.write(monero_config)
            print("✓ Monero configuration saved to: monerod.conf")
        sys.exit(0)
    
    if not CRYPTOGRAPHY_AVAILABLE:
        print("\nCannot proceed without cryptography library or --use-tor flag")
        sys.exit(1)
    
    print("Generating Tor v3 onion address for Monero...")
    print("-" * 60)
    
    # Generate hidden service files
    onion_address = create_tor_hidden_service_files()
    
    print(f"✓ Onion address generated: {onion_address}.onion")
    print(f"✓ Hidden service files created in: tor_hidden_service/")
    print()
    
    # Generate configuration files
    torrc_config = generate_torrc_config(onion_address)
    monero_config = generate_monero_config(onion_address)
    
    # Save configurations
    with open('torrc.conf', 'w') as f:
        f.write(torrc_config)
    print("✓ Tor configuration saved to: torrc.conf")
    
    with open('monerod.conf', 'w') as f:
        f.write(monero_config)
    print("✓ Monero configuration saved to: monerod.conf")
    
    print()
    print("Next steps:")
    print("1. Copy tor_hidden_service/ to /var/lib/tor/monero_rpc/")
    print("2. Set ownership: sudo chown -R debian-tor:debian-tor /var/lib/tor/monero_rpc/")
    print("3. Add torrc.conf contents to /etc/tor/torrc")
    print("4. Restart Tor: sudo systemctl restart tor")
    print("5. Use monerod.conf settings in your Monero daemon")
    print()
    print(f"Your onion address: {onion_address}.onion")
